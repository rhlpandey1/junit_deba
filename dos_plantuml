@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Address {
  + Address(): 
  + Address(Long, String, String, Integer): 
  - city: String
  - address: String
  - pinCode: Integer
  - id: Long
  + builder(): AddressBuilder
   city: String
   address: String
   id: Long
   pinCode: Integer
}
class AddressBuilder {
  ~ AddressBuilder(): 
  + id(Long): AddressBuilder
  + city(String): AddressBuilder
  + address(String): AddressBuilder
  + pinCode(Integer): AddressBuilder
  + build(): Address
  + toString(): String
}
interface AddressRepository << interface >>
class AdminController {
  + AdminController(): 
  + updateDocuments(List<FileDto>): ResponseEntity<String>
  + updateRequiredDocumentsForDriver(List<String>, String): ResponseEntity<String>
  + approveAllDocuments(String): ResponseEntity<String>
}
class AdminService {
  + AdminService(): 
  + approveAllFiles(String): void
  + updateFileStatusByAdmin(List<FileDto>): void
  + saveRequiredDocuments(List<String>, String): void
}
class AmazonConfig {
  + AmazonConfig(): 
  + s3(): AmazonS3
}
interface AmazonS3Service << interface >> {
  + upload(String, String, Optional<Map<String, String>>, MultipartFile): void
  + delete(String, String): void
}
class AmazonS3ServiceImpl {
  + AmazonS3ServiceImpl(): 
  + delete(String, String): void
  + upload(String, String, Optional<Map<String, String>>, MultipartFile): void
}
class CustomExceptionControllerAdvice {
  + CustomExceptionControllerAdvice(): 
  + handleValidationErrors(MethodArgumentNotValidException): ResponseEntity<Map<String, List<String>>>
  ~ generalException(RuntimeException): ErrorResponse
  ~ invalidStatus(Exception): ErrorResponse
  - getErrorsMap(List<String>): Map<String, List<String>>
  ~ shippingIDExists(ShippingDetailsExistsException): ErrorResponse
  ~ driverOnBoardingException(DriverOnBoardingException): ErrorResponse
  ~ badRequest(InvalidRequestException): ErrorResponse
  ~ requestShouldContainAFile(MultipartException): ErrorResponse
  ~ unsupportedContentType(UnsupportedMediaTypeException): ErrorResponse
  ~ userAlreadyExists(UserAlreadyExistsException): ErrorResponse
  ~ msgNotReadable(HttpMessageNotReadableException): ErrorResponse
  ~ documentTypeMisMatch(DocumentTypeMisMatchException): ErrorResponse
  ~ handleMaxUploadFileException(MaxUploadSizeExceededException): ErrorResponse
  ~ missingFileException(HttpRequestMethodNotSupportedException): ErrorResponse
  ~ badRequestExceptions(Exception): ErrorResponse
  ~ invalidDocumentType(EmptyFileException): ErrorResponse
  ~ fileNotFound(FileNotFoundException): ErrorResponse
  ~ fileAlreadyExists(FileAlreadyExistsException): ErrorResponse
}
class CustomUserDetailsService {
  + CustomUserDetailsService(): 
  + loadUserByUsername(String): UserDetails
  + mapRolesToAuthorities(Collection<Role>): Collection<GrantedAuthority>
}
class DateValidator {
  + DateValidator(): 
  + isValid(String): boolean
}
class DocumentTypeMisMatchException {
  + DocumentTypeMisMatchException(String): 
  + DocumentTypeMisMatchException(String, Throwable): 
}
interface DocumentsService << interface >> {
  + updateDocument(Long, MultipartFile): void
  + uploadFile(MultipartFile, String, String): void
  + getRequiredDocuments(String): List<String>
}
class DocumentsServiceImpl {
  + DocumentsServiceImpl(): 
  + uploadFile(MultipartFile, String, String): void
  + getRequiredDocuments(String): List<String>
  - getExtensionByStringHandling(String): Optional<String>
  - saveFileToS3(MultipartFile, String, String): void
  + updateDocument(Long, MultipartFile): void
}
class Driver {
  + Driver(): 
  + Driver(Long, String, String, String, String, String, List<File>, String, List<ShippingDetails>, Address, Timestamp): 
  - availableForRide: String
  - id: Long
  - address: Address
  - firstName: String
  - files: List<File>
  - lastName: String
  - shippingDetails: List<ShippingDetails>
  - createdAt: Timestamp
  - status: String
  - email: String
  - phoneNumber: String
  + builder(): DriverBuilder
   lastName: String
   id: Long
   email: String
   createdAt: Timestamp
   phoneNumber: String
   availableForRide: String
   status: String
   firstName: String
   files: List<File>
   address: Address
   shippingDetails: List<ShippingDetails>
}
class DriverBuilder {
  ~ DriverBuilder(): 
  + status(String): DriverBuilder
  + id(Long): DriverBuilder
  + lastName(String): DriverBuilder
  + firstName(String): DriverBuilder
  + createdAt(Timestamp): DriverBuilder
  + availableForRide(String): DriverBuilder
  + email(String): DriverBuilder
  + toString(): String
  + files(List<File>): DriverBuilder
  + phoneNumber(String): DriverBuilder
  + shippingDetails(List<ShippingDetails>): DriverBuilder
  + address(Address): DriverBuilder
  + build(): Driver
}
class DriverOnBoardingConstants {
  + DriverOnBoardingConstants(): 
}
class DriverOnBoardingException {
  + DriverOnBoardingException(String): 
  + DriverOnBoardingException(String, Throwable): 
}
class DriverOnBoardingUrls {
  + DriverOnBoardingUrls(): 
}
class DriverOnboardingController {
  + DriverOnboardingController(): 
  + uploadDocuments(MultipartFile, String, Authentication): ResponseEntity<String>
  + requiredDocuments(String): List<String>
  + markRideAvailability(Authentication, Map<String, String>): String
  + getRejectedDocuments(Authentication): ResponseEntity<Object>
  + updateDocuments(MultipartFile, Long): ResponseEntity<String>
  + registerDriver(UserRegistration): ResponseEntity<String>
  + updateShippingDetails(ShippingDto): ResponseEntity<String>
}
class DriverOnboardingServiceApplication {
  + DriverOnboardingServiceApplication(): 
  + main(String[]): void
}
interface DriverRepository << interface >> {
  + findByEmail(String): Driver
}
interface DriverService << interface >> {
  + saveDriverDetails(UserRegistration): void
  + updateShippingDetails(ShippingDto): void
  + markRideAvailability(Map<String, String>, String): String
  + getRejectedDocuments(String): List<FileDto>
}
class DriverServiceImpl {
  + DriverServiceImpl(): 
  + saveDriverDetails(UserRegistration): void
  + updateShippingDetails(ShippingDto): void
  + getRejectedDocuments(String): List<FileDto>
  + markRideAvailability(Map<String, String>, String): String
}
interface EmailService << interface >> {
  + sendShippingDetailsMail(Driver, ShippingDto): void
}
class EmailServiceImpl {
  + EmailServiceImpl(): 
  + sendShippingDetailsMail(Driver, ShippingDto): void
}
class EmptyFileException {
  + EmptyFileException(String, Throwable): 
  + EmptyFileException(String): 
}
class ErrorResponse {
  + ErrorResponse(String, Integer, String): 
  + ErrorResponse(): 
  - errorCode: Integer
  - errorMsg: String
  - status: String
   status: String
   errorCode: Integer
   errorMsg: String
}
class File {
  + File(): 
  + File(Long, String, String, String, String, Driver, String, Timestamp): 
  - createdAt: Timestamp
  - id: Long
  - driver: Driver
  - reason: String
  - documentType: String
  - status: String
  - path: String
  - fileName: String
  + builder(): FileBuilder
   id: Long
   createdAt: Timestamp
   fileName: String
   driver: Driver
   status: String
   reason: String
   path: String
   documentType: String
}
class FileBuilder {
  ~ FileBuilder(): 
  + id(Long): FileBuilder
  + fileName(String): FileBuilder
  + status(String): FileBuilder
  + documentType(String): FileBuilder
  + path(String): FileBuilder
  + driver(Driver): FileBuilder
  + reason(String): FileBuilder
  + createdAt(Timestamp): FileBuilder
  + build(): File
  + toString(): String
}
class FileDto {
  + FileDto(Long, String, String, String, String): 
  + FileDto(): 
  - status: String
  - reason: String
  - id: Long
  - fileName: String
  - documentType: String
  + builder(): FileDtoBuilder
   status: String
   reason: String
   id: Long
   fileName: String
   documentType: String
}
class FileDtoBuilder {
  ~ FileDtoBuilder(): 
  + id(Long): FileDtoBuilder
  + fileName(String): FileDtoBuilder
  + status(String): FileDtoBuilder
  + documentType(String): FileDtoBuilder
  + reason(String): FileDtoBuilder
  + build(): FileDto
  + toString(): String
}
interface FileRepository << interface >>
class FileValidator {
  + FileValidator(): 
  + isValidFile(MultipartFile, String): boolean
  - isSupportedContentType(String): boolean
  - checkDocumentsContainsInRequiredDocs(String): boolean
}
class InvalidRequestException {
  + InvalidRequestException(String): 
  + InvalidRequestException(String, Throwable): 
}
class MessageConstants {
  + MessageConstants(): 
}
class RequiredDocuments {
  + RequiredDocuments(Long, String, String): 
  + RequiredDocuments(): 
  - documents: String
  - role: String
  - id: Long
  + builder(): RequiredDocumentsBuilder
   id: Long
   documents: String
   role: String
}
class RequiredDocumentsBuilder {
  ~ RequiredDocumentsBuilder(): 
  + id(Long): RequiredDocumentsBuilder
  + role(String): RequiredDocumentsBuilder
  + documents(String): RequiredDocumentsBuilder
  + build(): RequiredDocuments
  + toString(): String
}
interface RequiredDocumentsRepository << interface >> {
  + findByRole(String): RequiredDocuments
}
enum RideStatus << enumeration >> {
  + RideStatus(): 
  + valueOf(String): RideStatus
  + values(): RideStatus[]
}
class Role {
  + Role(Long, String, List<User>): 
  + Role(): 
  + Role(String): 
  - users: List<User>
  - id: Long
  - name: String
   name: String
   id: Long
   users: List<User>
}
interface RoleRepository << interface >> {
  + findByName(String): Role
}
class SecurityConfiguration {
  + SecurityConfiguration(): 
  + filterChain(HttpSecurity): SecurityFilterChain
  + passwordEncoder(): PasswordEncoder
  + configureGlobal(AuthenticationManagerBuilder): void
}
class ShippingDetails {
  + ShippingDetails(Long, String, String, String, String, Date, Driver, Timestamp): 
  + ShippingDetails(): 
  - courierCompany: String
  - driver: Driver
  - trackingId: String
  - deviceId: String
  - deliveryStatus: String
  - createdAt: Timestamp
  - estimatedDate: Date
  - id: Long
  + builder(): ShippingDetailsBuilder
   id: Long
   createdAt: Timestamp
   courierCompany: String
   driver: Driver
   trackingId: String
   deviceId: String
   estimatedDate: Date
   deliveryStatus: String
}
class ShippingDetailsBuilder {
  ~ ShippingDetailsBuilder(): 
  + trackingId(String): ShippingDetailsBuilder
  + id(Long): ShippingDetailsBuilder
  + courierCompany(String): ShippingDetailsBuilder
  + deviceId(String): ShippingDetailsBuilder
  + deliveryStatus(String): ShippingDetailsBuilder
  + estimatedDate(Date): ShippingDetailsBuilder
  + driver(Driver): ShippingDetailsBuilder
  + createdAt(Timestamp): ShippingDetailsBuilder
  + build(): ShippingDetails
  + toString(): String
}
class ShippingDetailsExistsException {
  + ShippingDetailsExistsException(String): 
  + ShippingDetailsExistsException(String, Throwable): 
}
class ShippingDto {
  + ShippingDto(String, String, String, String, String, String): 
  + ShippingDto(): 
  - trackingId: String
  - userEmail: String
  - courierCompany: String
  - deviceId: String
  - estimatedDate: String
  - deliveryStatus: String
  + builder(): ShippingDtoBuilder
   trackingId: String
   userEmail: String
   deviceId: String
   estimatedDate: String
   courierCompany: String
   deliveryStatus: String
}
class ShippingDtoBuilder {
  ~ ShippingDtoBuilder(): 
  + userEmail(String): ShippingDtoBuilder
  + trackingId(String): ShippingDtoBuilder
  + courierCompany(String): ShippingDtoBuilder
  + deviceId(String): ShippingDtoBuilder
  + deliveryStatus(String): ShippingDtoBuilder
  + estimatedDate(String): ShippingDtoBuilder
  + build(): ShippingDto
  + toString(): String
}
interface ShippingRepository << interface >>
enum Status << enumeration >> {
  + Status(): 
  + valueOf(String): Status
  + values(): Status[]
}
class User {
  + User(Long, String, String, Timestamp, List<Role>): 
  + User(): 
  + User(String, String, List<Role>): 
  - password: String
  - roles: List<Role>
  - email: String
  - createdAt: Timestamp
  - id: Long
  + builder(): UserBuilder
   password: String
   roles: List<Role>
   id: Long
   email: String
   createdAt: Timestamp
}
class UserAlreadyExistsException {
  + UserAlreadyExistsException(String): 
  + UserAlreadyExistsException(String, Throwable): 
}
class UserBuilder {
  ~ UserBuilder(): 
  + id(Long): UserBuilder
  + email(String): UserBuilder
  + password(String): UserBuilder
  + createdAt(Timestamp): UserBuilder
  + roles(List<Role>): UserBuilder
  + build(): User
  + toString(): String
}
class UserRegistration {
  + UserRegistration(): 
  + UserRegistration(String, String, String, String, String, String, Boolean, String, Integer): 
  - pinCode: Integer
  - lastName: String
  - password: String
  - isDriver: Boolean
  - phoneNumber: String
  - firstName: String
  - address: String
  - email: String
  - city: String
   password: String
   lastName: String
   email: String
   pinCode: Integer
   phoneNumber: String
   city: String
   firstName: String
   address: String
   isDriver: Boolean
}
interface UserRepository << interface >> {
  + findByEmail(String): User
}
interface UserService << interface >> {
  + findUserByEmail(String): User
  + save(UserRegistration): User
}
class UserServiceImpl {
  + UserServiceImpl(): 
  + save(UserRegistration): User
  + findUserByEmail(String): User
  - createDriverRole(): Role
}

AddressBuilder                      +-[#820000,plain]-  Address                            
AmazonS3ServiceImpl                 -[#008200,dashed]-^  AmazonS3Service                    
DocumentsServiceImpl                -[#008200,dashed]-^  DocumentsService                   
DriverBuilder                       +-[#820000,plain]-  Driver                             
DriverServiceImpl                   -[#008200,dashed]-^  DriverService                      
EmailServiceImpl                    -[#008200,dashed]-^  EmailService                       
FileBuilder                         +-[#820000,plain]-  File                               
FileDtoBuilder                      +-[#820000,plain]-  FileDto                            
RequiredDocumentsBuilder            +-[#820000,plain]-  RequiredDocuments                  
ShippingDetailsBuilder              +-[#820000,plain]-  ShippingDetails                    
ShippingDtoBuilder                  +-[#820000,plain]-  ShippingDto                        
UserBuilder                         +-[#820000,plain]-  User                               
UserServiceImpl                     -[#008200,dashed]-^  UserService                        
@enduml
